{"version":3,"file":"y-mongodb.cjs","sources":["../src/mongo-adapter.js","../src/utils.js","../src/y-mongodb.js"],"sourcesContent":["import mongojs from 'mongojs';\nimport mongoist from 'mongoist';\n\nexport class MongoAdapter {\n\t/**\n\t * Create a MongoAdapter instance.\n\t * @param {string} location\n\t * @param {object} [opts]\n\t * @param {string} [opts.collection] Name of the collection where all documents are stored.\n\t * @param {boolean} [opts.multipleCollections] When set to true, each document gets an own\n\t * @param {(string)=>string)} [opts.collectionNameCallback] When set, custom collection name\n\t * collection (instead of all documents stored in the same one).\n\t * When set to true, the option $collection gets ignored.\n\t */\n\tconstructor(location, { collection, multipleCollections, collectionNameCallback = null }) {\n\t\tthis.location = location;\n\t\tthis.collection = collection;\n\t\tthis.multipleCollections = multipleCollections;\n\t\tthis.db = null;\n\t\tthis.collectionNameCallback = collectionNameCallback;\n\t\tthis.open();\n\t}\n\n\t/**\n\t * Open the connection to MongoDB instance.\n\t */\n\topen() {\n\t\tlet mongojsDb;\n\t\tif (this.multipleCollections) {\n\t\t\tmongojsDb = mongojs(this.location);\n\t\t} else {\n\t\t\tmongojsDb = mongojs(this.location, [this.collection]);\n\t\t}\n\t\tthis.db = mongoist(mongojsDb);\n\t}\n\n\t/**\n\t * Get the MongoDB collection name for any docName\n\t * @param {object} [opts]\n\t * @param {string} [opts.docName]\n\t * @returns {string} collectionName\n\t */\n\t_getCollectionName({ docName }) {\n\t\tif (this.multipleCollections) {\n\t\t\tif (this.collectionNameCallback) {\n\t\t\t\treturn this.collectionNameCallback(docName);\n\t\t\t} else {\n\t\t\t\treturn docName;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.collection;\n\t\t}\n\t}\n\n\t/**\n\t * Apply a $query and get one document from MongoDB.\n\t * @param {object} query\n\t * @returns {Promise<object>}\n\t */\n\tget(query) {\n\t\treturn this.db[this._getCollectionName(query)].findOne(query);\n\t}\n\n\t/**\n\t * Store one document in MongoDB.\n\t * @param {object} query\n\t * @param {object} values\n\t * @returns {Promise<object>} Stored document\n\t */\n\tput(query, values) {\n\t\tif (!query.docName || !query.version || !values.value) {\n\t\t\tthrow new Error('Document and version must be provided');\n\t\t}\n\n\t\t// findAndModify with upsert:true should simulate leveldb put better\n\t\treturn this.db[this._getCollectionName(query)].findAndModify({\n\t\t\tquery,\n\t\t\tupdate: { ...query, ...values },\n\t\t\tupsert: true,\n\t\t\tnew: true,\n\t\t});\n\t}\n\n\t/**\n\t * Removes all documents that fit the $query\n\t * @param {object} query\n\t * @returns {Promise<object>} Contains status of the operation\n\t */\n\tdel(query) {\n\t\tconst bulk = this.db[this._getCollectionName(query)].initializeOrderedBulkOp();\n\t\tbulk.find(query).remove();\n\t\treturn bulk.execute();\n\t}\n\n\t/**\n\t * Get all or at least $opts.limit documents that fit the $query.\n\t * @param {object} query\n\t * @param {object} [opts]\n\t * @param {number} [opts.limit]\n\t * @param {boolean} [opts.reverse]\n\t * @returns {Promise<Array<object>>}\n\t */\n\treadAsCursor(query, { limit, reverse } = {}) {\n\t\tlet curs = this.db[this._getCollectionName(query)].findAsCursor(query);\n\t\tif (reverse) curs = curs.sort({ clock: -1 });\n\t\tif (limit) curs = curs.limit(limit);\n\t\treturn curs.toArray();\n\t}\n\n\t/**\n\t * Close connection to MongoDB instance.\n\t */\n\tclose() {\n\t\tthis.db.close();\n\t}\n\n\t/**\n\t * Get all collection names stored on the MongoDB instance.\n\t * @returns {Promise<Array<string>>}\n\t */\n\tgetCollectionNames() {\n\t\treturn this.db.getCollectionNames();\n\t}\n\n\t/**\n\t * Delete database\n\t */\n\tasync flush() {\n\t\tawait this.db.dropDatabase();\n\t\tawait this.db.close();\n\t}\n\n\t/**\n\t * Delete collection\n\t * @param {string} collectionName\n\t */\n\tdropCollection(collectionName) {\n\t\treturn this.db[collectionName].drop();\n\t}\n}\n","import * as Y from 'yjs';\nimport * as binary from 'lib0/binary';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport { Buffer } from 'buffer';\n\nexport const PREFERRED_TRIM_SIZE = 400;\n\n/**\n * Remove all documents from db with Clock between $from and $to\n *\n * @param {any} db\n * @param {string} docName\n * @param {number} from Greater than or equal\n * @param {number} to lower than (not equal)\n * @return {Promise<void>}\n */\nexport const clearUpdatesRange = async (db, docName, from, to) => db.del({\n\tdocName,\n\tclock: {\n\t\t$gte: from,\n\t\t$lt: to,\n\t},\n});\n\n/**\n * Create a unique key for a update message.\n * @param {string} docName\n * @param {number} clock must be unique\n * @return {Object} [opts.version, opts.docName, opts.action, opts.clock]\n */\nexport const createDocumentUpdateKey = (docName, clock) => {\n\tif (clock !== undefined) {\n\t\treturn {\n\t\t\tversion: 'v1',\n\t\t\taction: 'update',\n\t\t\tdocName,\n\t\t\tclock,\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tversion: 'v1',\n\t\t\taction: 'update',\n\t\t\tdocName,\n\t\t};\n\t}\n};\n\n/**\n * We have a separate state vector key so we can iterate efficiently over all documents\n * @param {string} docName\n * @return {Object} [opts.docName, opts.version]\n */\nexport const createDocumentStateVectorKey = (docName) => ({\n\tdocName,\n\tversion: 'v1_sv',\n});\n\n/**\n * @param {string} docName\n * @param {string} metaKey\n * @return {Object} [opts.docName, opts.version, opts.docType, opts.metaKey]\n */\nexport const createDocumentMetaKey = (docName, metaKey) => ({\n\tversion: 'v1',\n\tdocName,\n\tmetaKey: `meta_${metaKey}`,\n});\n\n/**\n * @param {any} db\n * @param {object} query\n * @param {object} opts\n * @return {Promise<Array<any>>}\n */\nexport const getMongoBulkData = (db, query, opts) => db.readAsCursor(query, opts);\n\n/**\n * @param {any} db\n * @return {Promise<any>}\n */\nexport const flushDB = (db) => db.flush();\n\n/**\n * Convert the mongo document array to an array of values (as buffers)\n *\n * @param {<Array<Object>>} docs\n * @return {<Array<Buffer>>}\n */\nconst _convertMongoUpdates = (docs) => {\n\tif (!Array.isArray(docs) || !docs.length) return [];\n\n\treturn docs.map((update) => update.value.buffer);\n};\n/**\n * Get all document updates for a specific document.\n *\n * @param {any} db\n * @param {string} docName\n * @param {any} [opts]\n * @return {Promise<Array<Object>>}\n */\nexport const getMongoUpdates = async (db, docName, opts = {}) => {\n\tconst docs = await getMongoBulkData(db, createDocumentUpdateKey(docName), opts);\n\treturn _convertMongoUpdates(docs);\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n * @return {Promise<number>} Returns -1 if this document doesn't exist yet\n */\nexport const getCurrentUpdateClock = (db, docName) => getMongoBulkData(\n\tdb,\n\t{\n\t\t...createDocumentUpdateKey(docName, 0),\n\t\tclock: {\n\t\t\t$gte: 0,\n\t\t\t$lt: binary.BITS32,\n\t\t},\n\t},\n\t{ reverse: true, limit: 1 },\n).then((updates) => {\n\tif (updates.length === 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn updates[0].clock;\n\t}\n});\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} sv state vector\n * @param {number} clock current clock of the document so we can determine\n * when this statevector was created\n */\nexport const writeStateVector = async (db, docName, sv, clock) => {\n\tconst encoder = encoding.createEncoder();\n\tencoding.writeVarUint(encoder, clock);\n\tencoding.writeVarUint8Array(encoder, sv);\n\tawait db.put(createDocumentStateVectorKey(docName), {\n\t\tvalue: Buffer.from(encoding.toUint8Array(encoder)),\n\t});\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} update\n * @return {Promise<number>} Returns the clock of the stored update\n */\nexport const storeUpdate = async (db, docName, update) => {\n\tconst clock = await getCurrentUpdateClock(db, docName);\n\tif (clock === -1) {\n\t\t// make sure that a state vector is always written, so we can search for available documents\n\t\tconst ydoc = new Y.Doc();\n\t\tY.applyUpdate(ydoc, update);\n\t\tconst sv = Y.encodeStateVector(ydoc);\n\t\tawait writeStateVector(db, docName, sv, 0);\n\t}\n\n\tawait db.put(createDocumentUpdateKey(docName, clock + 1), {\n\t\tvalue: Buffer.from(update),\n\t});\n\n\treturn clock + 1;\n};\n\n/**\n * For now this is a helper method that creates a Y.Doc and then re-encodes a document update.\n * In the future this will be handled by Yjs without creating a Y.Doc (constant memory consumption).\n *\n * @param {Array<Uint8Array>} updates\n * @return {{update:Uint8Array, sv: Uint8Array}}\n */\nexport const mergeUpdates = (updates) => {\n\tconst ydoc = new Y.Doc();\n\tydoc.transact(() => {\n\t\tfor (let i = 0; i < updates.length; i++) {\n\t\t\tY.applyUpdate(ydoc, updates[i]);\n\t\t}\n\t});\n\treturn { update: Y.encodeStateAsUpdate(ydoc), sv: Y.encodeStateVector(ydoc) };\n};\n\n/**\n * @param {Uint8Array} buf\n * @return {{ sv: Uint8Array, clock: number }}\n */\nexport const decodeMongodbStateVector = (buf) => {\n\tlet decoder;\n\tif (Buffer.isBuffer(buf)) {\n\t\tdecoder = decoding.createDecoder(buf);\n\t} else if (Buffer.isBuffer(buf?.buffer)) {\n\t\tdecoder = decoding.createDecoder(buf.buffer);\n\t} else {\n\t\tthrow new Error('No buffer provided at decodeMongodbStateVector()');\n\t}\n\tconst clock = decoding.readVarUint(decoder);\n\tconst sv = decoding.readVarUint8Array(decoder);\n\treturn { sv, clock };\n};\n\n/**\n * @param {any} db\n * @param {string} docName\n */\nexport const readStateVector = async (db, docName) => {\n\tconst doc = await db.get({ ...createDocumentStateVectorKey(docName) });\n\tif (!doc?.value) {\n\t\t// no state vector created yet or no document exists\n\t\treturn { sv: null, clock: -1 };\n\t}\n\treturn decodeMongodbStateVector(doc.value);\n};\n\nexport const getAllSVDocs = async (db) => db.readAsCursor({ version: 'v1_sv' });\n\n/**\n * Merge all MongoDB documents of the same yjs document together.\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} stateAsUpdate\n * @param {Uint8Array} stateVector\n * @return {Promise<number>} returns the clock of the flushed doc\n */\nexport const flushDocument = async (db, docName, stateAsUpdate, stateVector) => {\n\tconst clock = await storeUpdate(db, docName, stateAsUpdate);\n\tawait writeStateVector(db, docName, stateVector, clock);\n\tawait clearUpdatesRange(db, docName, 0, clock);\n\treturn clock;\n};\n","import * as Y from 'yjs';\nimport * as binary from 'lib0/binary';\nimport * as promise from 'lib0/promise';\nimport { MongoAdapter } from './mongo-adapter';\nimport * as U from './utils';\n\nexport class MongodbPersistence {\n\t/**\n\t * Create a y-mongodb persistence instance.\n\t * @param {string} location The connection string for the MongoDB instance.\n\t * @param {object} [opts=] Additional optional parameters.\n\t * @param {string} [opts.collectionName=\"yjs-writings\"] Name of the collection where all\n\t * documents are stored. Default: \"yjs-writings\"\n\t * @param {boolean} [opts.multipleCollections=false] When set to true, each document gets\n\t * an own collection (instead of all documents stored in the same one). When set to true,\n\t * the option collectionName gets ignored. Default: false\n\t * @param {number} [opts.flushSize=400] The number of stored transactions needed until\n\t * they are merged automatically into one Mongodb document. Default: 400\n\t * @param {(string)=>string)} [opts.collectionNameCallback] When set, custom collection name\n\t */\n\tconstructor(location, { collectionName = 'yjs-writings', multipleCollections = false, flushSize = 400, collectionNameCallback = nul } = {}) {\n\t\tif (typeof collectionName !== 'string' || !collectionName) {\n\t\t\tthrow new Error('Constructor option \"collectionName\" is not a valid string. Either dont use this option (default is \"yjs-writings\") or use a valid string! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object');\n\t\t}\n\t\tif (typeof multipleCollections !== 'boolean') {\n\t\t\tthrow new Error('Constructor option \"multipleCollections\" is not a boolean. Either dont use this option (default is \"false\") or use a valid boolean! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object');\n\t\t}\n\t\tif (typeof flushSize !== 'number' || flushSize <= 0) {\n\t\t\tthrow new Error('Constructor option \"flushSize\" is not a valid number. Either dont use this option (default is \"400\") or use a valid number larger than 0! Take a look into the Readme for more information: https://github.com/MaxNoetzold/y-mongodb-provider#persistence--mongodbpersistenceconnectionlink-string-options-object');\n\t\t}\n\t\tconst db = new MongoAdapter(location, {\n\t\t\tcollection: collectionName,\n\t\t\tmultipleCollections,\n\t\t\tcollectionNameCallback,\n\t\t});\n\t\tthis.flushSize = flushSize ?? U.PREFERRED_TRIM_SIZE;\n\t\tthis.multipleCollections = multipleCollections;\n\n\t\t// scope the queue of the transaction to each docName\n\t\t// -> this should allow concurrency for different rooms\n\t\t// Idea and adjusted code from: https://github.com/fadiquader/y-mongodb/issues/10\n\t\tthis.tr = {};\n\n\t\t/**\n\t\t * Execute an transaction on a database. This will ensure that other processes are\n\t\t * currently not writing.\n\t\t *\n\t\t * This is a private method and might change in the future.\n\t\t *\n\t\t * @template T\n\t\t *\n\t\t * @param {function(any):Promise<T>} f A transaction that receives the db object\n\t\t * @return {Promise<T>}\n\t\t */\n\t\tthis._transact = (docName, f) => {\n\t\t\tif (!this.tr[docName]) {\n\t\t\t\tthis.tr[docName] = promise.resolve();\n\t\t\t}\n\n\t\t\tconst currTr = this.tr[docName];\n\n\t\t\tthis.tr[docName] = (async () => {\n\t\t\t\tawait currTr;\n\n\t\t\t\tlet res = /** @type {any} */ (null);\n\t\t\t\ttry {\n\t\t\t\t\tres = await f(db);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.warn('Error during saving transaction', err);\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t})();\n\t\t\treturn this.tr[docName];\n\t\t};\n\t}\n\n\t/**\n\t * Create a Y.Doc instance with the data persistet in mongodb.\n\t * Use this to temporarily create a Yjs document to sync changes or extract data.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<Y.Doc>}\n\t */\n\tgetYDoc(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\tconst ydoc = new Y.Doc();\n\t\t\tydoc.transact(() => {\n\t\t\t\tfor (let i = 0; i < updates.length; i++) {\n\t\t\t\t\tY.applyUpdate(ydoc, updates[i]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (updates.length > this.flushSize) {\n\t\t\t\tawait U.flushDocument(db, docName, Y.encodeStateAsUpdate(ydoc), Y.encodeStateVector(ydoc));\n\t\t\t}\n\t\t\treturn ydoc;\n\t\t});\n\t}\n\n\t/**\n\t * Store a single document update to the database.\n\t *\n\t * @param {string} docName\n\t * @param {Uint8Array} update\n\t * @return {Promise<number>} Returns the clock of the stored update\n\t */\n\tstoreUpdate(docName, update) {\n\t\treturn this._transact(docName, (db) => U.storeUpdate(db, docName, update));\n\t}\n\n\t/**\n\t * The state vector (describing the state of the persisted document - see https://github.com/yjs/yjs#Document-Updates) is maintained in a separate field and constantly updated.\n\t *\n\t * This allows you to sync changes without actually creating a Yjs document.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<Uint8Array>}\n\t */\n\tgetStateVector(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst { clock, sv } = await U.readStateVector(db, docName);\n\t\t\tlet curClock = -1;\n\t\t\tif (sv !== null) {\n\t\t\t\tcurClock = await U.getCurrentUpdateClock(db, docName);\n\t\t\t}\n\t\t\tif (sv !== null && clock === curClock) {\n\t\t\t\treturn sv;\n\t\t\t} else {\n\t\t\t\t// current state vector is outdated\n\t\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\t\tconst { update, sv: newSv } = U.mergeUpdates(updates);\n\t\t\t\tawait U.flushDocument(db, docName, update, newSv);\n\t\t\t\treturn newSv;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the differences directly from the database.\n\t * The same as Y.encodeStateAsUpdate(ydoc, stateVector).\n\t * @param {string} docName\n\t * @param {Uint8Array} stateVector\n\t */\n\tasync getDiff(docName, stateVector) {\n\t\tconst ydoc = await this.getYDoc(docName);\n\t\treturn Y.encodeStateAsUpdate(ydoc, stateVector);\n\t}\n\n\t/**\n\t * Delete a document, and all associated data from the database.\n\t * When option multipleCollections is set, it removes the corresponding collection\n\t * @param {string} docName\n\t * @return {Promise<void>}\n\t */\n\tclearDocument(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tif (!this.multipleCollections) {\n\t\t\t\tawait db.del(U.createDocumentStateVectorKey(docName));\n\t\t\t\tawait U.clearUpdatesRange(db, docName, 0, binary.BITS32);\n\t\t\t} else {\n\t\t\t\tawait db.dropCollection(docName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Persist some meta information in the database and associate it\n\t * with a document. It is up to you what you store here.\n\t * You could, for example, store credentials here.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @param {any} value\n\t * @return {Promise<void>}\n\t */\n\tsetMeta(docName, metaKey, value) {\n\t\t/*\tUnlike y-leveldb, we simply store the value here without encoding\n\t \t\t it in a buffer beforehand. */\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tawait db.put(U.createDocumentMetaKey(docName, metaKey), { value });\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve a store meta value from the database. Returns undefined if the\n\t * metaKey doesn't exist.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @return {Promise<any>}\n\t */\n\tgetMeta(docName, metaKey) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst res = await db.get({ ...U.createDocumentMetaKey(docName, metaKey) });\n\t\t\tif (!res?.value) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn res.value;\n\t\t});\n\t}\n\n\t/**\n\t * Delete a store meta value.\n\t *\n\t * @param {string} docName\n\t * @param {string} metaKey\n\t * @return {Promise<any>}\n\t */\n\tdelMeta(docName, metaKey) {\n\t\treturn this._transact(docName, (db) => db.del({\n\t\t\t...U.createDocumentMetaKey(docName, metaKey),\n\t\t}));\n\t}\n\n\t/**\n\t * Retrieve the names of all stored documents.\n\t *\n\t * @return {Promise<Array<string>>}\n\t */\n\tgetAllDocNames() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tif (this.multipleCollections) {\n\t\t\t\t// get all collection names from db\n\t\t\t\treturn db.getCollectionNames();\n\t\t\t} else {\n\t\t\t\t// when all docs are stored in the same collection we just need to get all\n\t\t\t\t//  statevectors and return their names\n\t\t\t\tconst docs = await U.getAllSVDocs(db);\n\t\t\t\treturn docs.map((doc) => doc.docName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve the state vectors of all stored documents.\n\t * You can use this to sync two y-leveldb instances.\n\t * !Note: The state vectors might be outdated if the associated document\n\t * is not yet flushed. So use with caution.\n\t * @return {Promise<Array<{ name: string, sv: Uint8Array, clock: number }>>}\n\t * @todo may not work?\n\t */\n\tgetAllDocStateVectors() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tconst docs = await U.getAllSVDocs(db);\n\t\t\treturn docs.map((doc) => {\n\t\t\t\tconst { sv, clock } = U.decodeMongodbStateVector(doc.value);\n\t\t\t\treturn { name: doc.docName, sv, clock };\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internally y-mongodb stores incremental updates. You can merge all document\n\t * updates to a single entry. You probably never have to use this.\n\t * It is done automatically every $options.flushsize (default 400) transactions.\n\t *\n\t * @param {string} docName\n\t * @return {Promise<void>}\n\t */\n\tflushDocument(docName) {\n\t\treturn this._transact(docName, async (db) => {\n\t\t\tconst updates = await U.getMongoUpdates(db, docName);\n\t\t\tconst { update, sv } = U.mergeUpdates(updates);\n\t\t\tawait U.flushDocument(db, docName, update, sv);\n\t\t});\n\t}\n\n\t/**\n\t * Delete the whole yjs mongodb\n\t * @return {Promise<void>}\n\t */\n\tflushDB() {\n\t\treturn this._transact('global', async (db) => {\n\t\t\tawait U.flushDB(db);\n\t\t});\n\t}\n}\n"],"names":["mongojs","mongoist","binary","encoding","Buffer","Y","decoding","U.PREFERRED_TRIM_SIZE","promise","U.getMongoUpdates","U.flushDocument","U.storeUpdate","U.readStateVector","U.getCurrentUpdateClock","U.mergeUpdates","U.createDocumentStateVectorKey","U.clearUpdatesRange","U.createDocumentMetaKey","U.getAllSVDocs","U.decodeMongodbStateVector","U.flushDB"],"mappings":"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"}